# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class PredictPhysicalAct(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, age: int=None, gender: str=None, weight: int=None, height: int=None, blood_pressure: int=None, cholestrol: int=None, glucose: int=None, diabetes: int=None, discomfirt_chest: str=None, current_physical_activity_status: str=None, family_history_heart_disease: str=None, cigerette_consumption: str=None):  # noqa: E501
        """PredictPhysicalAct - a model defined in Swagger

        :param age: The age of this PredictPhysicalAct.  # noqa: E501
        :type age: int
        :param gender: The gender of this PredictPhysicalAct.  # noqa: E501
        :type gender: str
        :param weight: The weight of this PredictPhysicalAct.  # noqa: E501
        :type weight: int
        :param height: The height of this PredictPhysicalAct.  # noqa: E501
        :type height: int
        :param blood_pressure: The blood_pressure of this PredictPhysicalAct.  # noqa: E501
        :type blood_pressure: int
        :param cholestrol: The cholestrol of this PredictPhysicalAct.  # noqa: E501
        :type cholestrol: int
        :param glucose: The glucose of this PredictPhysicalAct.  # noqa: E501
        :type glucose: int
        :param diabetes: The diabetes of this PredictPhysicalAct.  # noqa: E501
        :type diabetes: int
        :param discomfirt_chest: The discomfirt_chest of this PredictPhysicalAct.  # noqa: E501
        :type discomfirt_chest: str
        :param current_physical_activity_status: The current_physical_activity_status of this PredictPhysicalAct.  # noqa: E501
        :type current_physical_activity_status: str
        :param family_history_heart_disease: The family_history_heart_disease of this PredictPhysicalAct.  # noqa: E501
        :type family_history_heart_disease: str
        :param cigerette_consumption: The cigerette_consumption of this PredictPhysicalAct.  # noqa: E501
        :type cigerette_consumption: str
        """
        self.swagger_types = {
            'age': int,
            'gender': str,
            'weight': int,
            'height': int,
            'blood_pressure': int,
            'cholestrol': int,
            'glucose': int,
            'diabetes': int,
            'discomfirt_chest': str,
            'current_physical_activity_status': str,
            'family_history_heart_disease': str,
            'cigerette_consumption': str
        }

        self.attribute_map = {
            'age': 'age',
            'gender': 'gender',
            'weight': 'weight',
            'height': 'height',
            'blood_pressure': 'blood_pressure',
            'cholestrol': 'cholestrol',
            'glucose': 'glucose',
            'diabetes': 'diabetes',
            'discomfirt_chest': 'discomfirt_chest',
            'current_physical_activity_status': 'current_physical_activity_status',
            'family_history_heart_disease': 'family_history_heart_disease',
            'cigerette_consumption': 'cigerette_consumption'
        }
        self._age = age
        self._gender = gender
        self._weight = weight
        self._height = height
        self._blood_pressure = blood_pressure
        self._cholestrol = cholestrol
        self._glucose = glucose
        self._diabetes = diabetes
        self._discomfirt_chest = discomfirt_chest
        self._current_physical_activity_status = current_physical_activity_status
        self._family_history_heart_disease = family_history_heart_disease
        self._cigerette_consumption = cigerette_consumption

    @classmethod
    def from_dict(cls, dikt) -> 'PredictPhysicalAct':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The predict_physical_act of this PredictPhysicalAct.  # noqa: E501
        :rtype: PredictPhysicalAct
        """
        return util.deserialize_model(dikt, cls)

    @property
    def age(self) -> int:
        """Gets the age of this PredictPhysicalAct.

        age of the user  # noqa: E501

        :return: The age of this PredictPhysicalAct.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age: int):
        """Sets the age of this PredictPhysicalAct.

        age of the user  # noqa: E501

        :param age: The age of this PredictPhysicalAct.
        :type age: int
        """
        if age is None:
            raise ValueError("Invalid value for `age`, must not be `None`")  # noqa: E501

        self._age = age

    @property
    def gender(self) -> str:
        """Gets the gender of this PredictPhysicalAct.

        gender of the person  # noqa: E501

        :return: The gender of this PredictPhysicalAct.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender: str):
        """Sets the gender of this PredictPhysicalAct.

        gender of the person  # noqa: E501

        :param gender: The gender of this PredictPhysicalAct.
        :type gender: str
        """
        if gender is None:
            raise ValueError("Invalid value for `gender`, must not be `None`")  # noqa: E501

        self._gender = gender

    @property
    def weight(self) -> int:
        """Gets the weight of this PredictPhysicalAct.

        weight of the person  # noqa: E501

        :return: The weight of this PredictPhysicalAct.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight: int):
        """Sets the weight of this PredictPhysicalAct.

        weight of the person  # noqa: E501

        :param weight: The weight of this PredictPhysicalAct.
        :type weight: int
        """
        if weight is None:
            raise ValueError("Invalid value for `weight`, must not be `None`")  # noqa: E501

        self._weight = weight

    @property
    def height(self) -> int:
        """Gets the height of this PredictPhysicalAct.


        :return: The height of this PredictPhysicalAct.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height: int):
        """Sets the height of this PredictPhysicalAct.


        :param height: The height of this PredictPhysicalAct.
        :type height: int
        """
        if height is None:
            raise ValueError("Invalid value for `height`, must not be `None`")  # noqa: E501

        self._height = height

    @property
    def blood_pressure(self) -> int:
        """Gets the blood_pressure of this PredictPhysicalAct.

        blood pressure of the person  # noqa: E501

        :return: The blood_pressure of this PredictPhysicalAct.
        :rtype: int
        """
        return self._blood_pressure

    @blood_pressure.setter
    def blood_pressure(self, blood_pressure: int):
        """Sets the blood_pressure of this PredictPhysicalAct.

        blood pressure of the person  # noqa: E501

        :param blood_pressure: The blood_pressure of this PredictPhysicalAct.
        :type blood_pressure: int
        """
        if blood_pressure is None:
            raise ValueError("Invalid value for `blood_pressure`, must not be `None`")  # noqa: E501

        self._blood_pressure = blood_pressure

    @property
    def cholestrol(self) -> int:
        """Gets the cholestrol of this PredictPhysicalAct.

        cholesterol of the person  # noqa: E501

        :return: The cholestrol of this PredictPhysicalAct.
        :rtype: int
        """
        return self._cholestrol

    @cholestrol.setter
    def cholestrol(self, cholestrol: int):
        """Sets the cholestrol of this PredictPhysicalAct.

        cholesterol of the person  # noqa: E501

        :param cholestrol: The cholestrol of this PredictPhysicalAct.
        :type cholestrol: int
        """
        if cholestrol is None:
            raise ValueError("Invalid value for `cholestrol`, must not be `None`")  # noqa: E501

        self._cholestrol = cholestrol

    @property
    def glucose(self) -> int:
        """Gets the glucose of this PredictPhysicalAct.

        glucose of the person  # noqa: E501

        :return: The glucose of this PredictPhysicalAct.
        :rtype: int
        """
        return self._glucose

    @glucose.setter
    def glucose(self, glucose: int):
        """Sets the glucose of this PredictPhysicalAct.

        glucose of the person  # noqa: E501

        :param glucose: The glucose of this PredictPhysicalAct.
        :type glucose: int
        """
        if glucose is None:
            raise ValueError("Invalid value for `glucose`, must not be `None`")  # noqa: E501

        self._glucose = glucose

    @property
    def diabetes(self) -> int:
        """Gets the diabetes of this PredictPhysicalAct.

        diabetes of the person  # noqa: E501

        :return: The diabetes of this PredictPhysicalAct.
        :rtype: int
        """
        return self._diabetes

    @diabetes.setter
    def diabetes(self, diabetes: int):
        """Sets the diabetes of this PredictPhysicalAct.

        diabetes of the person  # noqa: E501

        :param diabetes: The diabetes of this PredictPhysicalAct.
        :type diabetes: int
        """
        if diabetes is None:
            raise ValueError("Invalid value for `diabetes`, must not be `None`")  # noqa: E501

        self._diabetes = diabetes

    @property
    def discomfirt_chest(self) -> str:
        """Gets the discomfirt_chest of this PredictPhysicalAct.

        discomfort chest of the person  # noqa: E501

        :return: The discomfirt_chest of this PredictPhysicalAct.
        :rtype: str
        """
        return self._discomfirt_chest

    @discomfirt_chest.setter
    def discomfirt_chest(self, discomfirt_chest: str):
        """Sets the discomfirt_chest of this PredictPhysicalAct.

        discomfort chest of the person  # noqa: E501

        :param discomfirt_chest: The discomfirt_chest of this PredictPhysicalAct.
        :type discomfirt_chest: str
        """
        if discomfirt_chest is None:
            raise ValueError("Invalid value for `discomfirt_chest`, must not be `None`")  # noqa: E501

        self._discomfirt_chest = discomfirt_chest

    @property
    def current_physical_activity_status(self) -> str:
        """Gets the current_physical_activity_status of this PredictPhysicalAct.

        current physical activity status of the person  # noqa: E501

        :return: The current_physical_activity_status of this PredictPhysicalAct.
        :rtype: str
        """
        return self._current_physical_activity_status

    @current_physical_activity_status.setter
    def current_physical_activity_status(self, current_physical_activity_status: str):
        """Sets the current_physical_activity_status of this PredictPhysicalAct.

        current physical activity status of the person  # noqa: E501

        :param current_physical_activity_status: The current_physical_activity_status of this PredictPhysicalAct.
        :type current_physical_activity_status: str
        """
        if current_physical_activity_status is None:
            raise ValueError("Invalid value for `current_physical_activity_status`, must not be `None`")  # noqa: E501

        self._current_physical_activity_status = current_physical_activity_status

    @property
    def family_history_heart_disease(self) -> str:
        """Gets the family_history_heart_disease of this PredictPhysicalAct.

        family history heart disease of the person  # noqa: E501

        :return: The family_history_heart_disease of this PredictPhysicalAct.
        :rtype: str
        """
        return self._family_history_heart_disease

    @family_history_heart_disease.setter
    def family_history_heart_disease(self, family_history_heart_disease: str):
        """Sets the family_history_heart_disease of this PredictPhysicalAct.

        family history heart disease of the person  # noqa: E501

        :param family_history_heart_disease: The family_history_heart_disease of this PredictPhysicalAct.
        :type family_history_heart_disease: str
        """
        if family_history_heart_disease is None:
            raise ValueError("Invalid value for `family_history_heart_disease`, must not be `None`")  # noqa: E501

        self._family_history_heart_disease = family_history_heart_disease

    @property
    def cigerette_consumption(self) -> str:
        """Gets the cigerette_consumption of this PredictPhysicalAct.

        cigerette consumption of the person  # noqa: E501

        :return: The cigerette_consumption of this PredictPhysicalAct.
        :rtype: str
        """
        return self._cigerette_consumption

    @cigerette_consumption.setter
    def cigerette_consumption(self, cigerette_consumption: str):
        """Sets the cigerette_consumption of this PredictPhysicalAct.

        cigerette consumption of the person  # noqa: E501

        :param cigerette_consumption: The cigerette_consumption of this PredictPhysicalAct.
        :type cigerette_consumption: str
        """
        if cigerette_consumption is None:
            raise ValueError("Invalid value for `cigerette_consumption`, must not be `None`")  # noqa: E501

        self._cigerette_consumption = cigerette_consumption
